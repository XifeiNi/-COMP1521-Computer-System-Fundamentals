#
# COMP1521 18s1 -- Assignment 1 -- Worm on a Plane!
#
# Base code by Jashank Jeremy and Wael Alghamdi
# Tweaked (severely) by John Shepherd
#
# Set your tabstop to 8 to make the formatting decent

# Requires:
#  - [no external symbols]

# Provides:
	.globl	wormCol
	.globl	wormRow
	.globl	grid
	.globl	randSeed

	.globl	main
	.globl	clearGrid
	.globl	drawGrid
	.globl	initWorm
	.globl	onGrid
	.globl	overlaps
	.globl	moveWorm
	.globl	addWormToGrid
	.globl	giveUp
	.globl	intValue
	.globl	delay
	.globl	seedRand
	.globl	randValue

	# Let me use $at, please.
	.set	noat

# The following notation is used to suggest places in
# the program, where you might like to add debugging code
#
# If you see e.g. putc('a'), replace by the three lines
# below, with each x replaced by 'a'
#
# print out a single character
# define putc(x)
# 	addi	$a0, $0, x
# 	addiu	$v0, $0, 11
# 	syscall
# 
# print out a word-sized int
# define putw(x)
# 	add 	$a0, $0, x
# 	addiu	$v0, $0, 1
# 	syscall

####################################
# .DATA
	.data

	.align 4
wormCol:	.space	40 * 4
	.align 4
wormRow:	.space	40 * 4
	.align 4
grid:		.space	20 * 40 * 1

randSeed:	.word	0

main__0:	.asciiz "Invalid Length (4..20)"
main__1:	.asciiz "Invalid # Moves (0..99)"
main__2:	.asciiz "Invalid Rand Seed (0..Big)"
main__3:	.asciiz "Iteration "
main__4:	.asciiz "Blocked!\n"
eol:		.asciiz "\n"
	# ANSI escape sequence for 'clear-screen'
main__clear:	.asciiz "\033[H\033[2J"
# main__clear:	.asciiz "__showpage__\n" # for debugging

giveUp__0:	.asciiz "Usage: "
giveUp__1:	.asciiz " Length #Moves Seed\n"

####################################
# .TEXT <main>
	.text
main:

# Frame:	$fp, $ra, $s0, $s1, $s2, $s3, $s4
# Uses: 	$a0, $a1, $v0, $s0, $s1, $s2, $s3, $s4
# Clobbers:	$a0, $a1

# Locals:
#	- `argc' in $s0
#	- `argv' in $s1
#	- `length' in $s2
#	- `ntimes' in $s3
#	- `i' in $s4

# Structure:
#	main
#	-> [prologue]
#	-> main_seed
#	  -> main_seed_t
#	  -> main_seed_end
#	-> main_seed_phi
#	-> main_i_init
#	-> main_i_cond
#	   -> main_i_step
#	-> main_i_end
#	-> [epilogue]
#	-> main_giveup_0
#	 | main_giveup_1
#	 | main_giveup_2
#	 | main_giveup_3
#	   -> main_giveup_common

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	sw	$s0, -12($sp)
	sw	$s1, -16($sp)
	sw	$s2, -20($sp)
	sw	$s3, -24($sp)
	sw	$s4, -28($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -28

	# save argc, argv
	add	$s0, $0, $a0
	add	$s1, $0, $a1

	# if (argc < 3) giveUp(argv[0],NULL);
	slti	$at, $s0, 4
	bne	$at, $0, main_giveup_0

	# length = intValue(argv[1]);
	addi	$a0, $s1, 4	# 1 * sizeof(word)
	lw	$a0, ($a0)	# (char *)$a0 = *(char **)$a0
	jal	intValue

	# if (length < 4 || length >= 40)
	#     giveUp(argv[0], "Invalid Length");
	# $at <- (length < 4) ? 1 : 0
	slti	$at, $v0, 4
	bne	$at, $0, main_giveup_1
	# $at <- (length < 40) ? 1 : 0
	slti	$at, $v0, 40
	beq	$at, $0, main_giveup_1
	# ... okay, save length
	add	$s2, $0, $v0

	# ntimes = intValue(argv[2]);
	addi	$a0, $s1, 8	# 2 * sizeof(word)
	lw	$a0, ($a0)
	jal	intValue

	# if (ntimes < 0 || ntimes >= 100)
	#     giveUp(argv[0], "Invalid # Iterations");
	# $at <- (ntimes < 0) ? 1 : 0
	slti	$at, $v0, 0
	bne	$at, $0, main_giveup_2
	# $at <- (ntimes < 100) ? 1 : 0
	slti	$at, $v0, 100
	beq	$at, $0, main_giveup_2
	# ... okay, save ntimes
	add	$s3, $0, $v0

main_seed:
	# seed = intValue(argv[3]);
	add	$a0, $s1, 12	# 3 * sizeof(word)
	lw	$a0, ($a0)
	jal	intValue

	# if (seed < 0) giveUp(argv[0], "Invalid Rand Seed");
	# $at <- (seed < 0) ? 1 : 0
	slt	$at, $v0, $0
	bne	$at, $0, main_giveup_3

main_seed_phi:
	add	$a0, $0, $v0
	jal	seedRand

	# start worm roughly in middle of grid

	# startCol: initial X-coord of head (X = column)
	# int startCol = 40/2 - length/2;
	addi	$s4, $0, 2
	addi	$a0, $0, 40
	div	$a0, $s4
	mflo	$a0
	# length/2
	div	$s2, $s4
	mflo	$s4
	# 40/2 - length/2
	sub	$a0, $a0, $s4

	# startRow: initial Y-coord of head (Y = row)
	# startRow = 20/2;
	addi	$s4, $0, 2
	addi	$a1, $0, 20
	div	$a1, $s4
	mflo	$a1

	# initWorm($a0=startCol, $a1=startRow, $a2=length)
	add	$a2, $0, $s2
	jal	initWorm

main_i_init:
	# int i = 0;
	add	$s4, $0, $0
main_i_cond:
	# i <= ntimes  ->  ntimes >= i  ->  !(ntimes < i)
	#   ->  $at <- (ntimes < i) ? 1 : 0
	slt	$at, $s3, $s4
	bne	$at, $0, main_i_end

	# clearGrid();
	jal	clearGrid

	# addWormToGrid($a0=length);
	add	$a0, $0, $s2
	jal	addWormToGrid

	# printf(CLEAR)
	la	$a0, main__clear
	addiu	$v0, $0, 4	# print_string
	syscall

	# printf("Iteration ")
	la	$a0, main__3
	addiu	$v0, $0, 4	# print_string
	syscall

	# printf("%d",i)
	add	$a0, $0, $s4
	addiu	$v0, $0, 1	# print_int
	syscall

	# putchar('\n')
	addi	$a0, $0, 0x0a
	addiu	$v0, $0, 11	# print_char
	syscall

	# drawGrid();
	jal	drawGrid
	la	$a0,eol
	li	$v0,4
	syscall
	# Debugging? print worm pos as (r1,c1) (r2,c2) ...
	
	# if (!moveWorm(length)) {...break}
	move	$a0,$s2
	jal	moveWorm
	bne	$v0, $0, main_moveWorm_phi

	# printf("Blocked!\n")
	la	$a0, main__4
	addiu	$v0, $0, 4	# print_string
	syscall

	# break;
	j	main_i_end

main_moveWorm_phi:
	addi	$a0, $0, 1
	jal	delay

main_i_step:
	addi	$s4, $s4, 1
	j	main_i_cond
main_i_end:

	# exit (EXIT_SUCCESS)
	# ... let's return from main with `EXIT_SUCCESS' instead.
	addi	$v0, $0, 0	# EXIT_SUCCESS

main__post:
	# tear down stack frame
	lw	$s4, -24($fp)
	lw	$s3, -20($fp)
	lw	$s2, -16($fp)
	lw	$s1, -12($fp)
	lw	$s0, -8($fp)
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra

main_giveup_0:
	add	$a1, $0, $0	# NULL
	j	main_giveup_common
main_giveup_1:
	la	$a1, main__0	# "Invalid Length"
	j	main_giveup_common
main_giveup_2:
	la	$a1, main__1	# "Invalid # Iterations"
	j	main_giveup_common
main_giveup_3:
	la	$a1, main__2	# "Invalid Rand Seed"
	# fall through
main_giveup_common:
	# giveUp ($a0=argv[0], $a1)
	lw	$a0, ($s1)	# argv[0]
	jal	giveUp		# never returns

####################################
# clearGrid() ... set all grid[][] elements to '.'
# .TEXT <clearGrid>
	.text
clearGrid:

# Frame:	$fp, $ra, $s0, $s1
# Uses: 	$s0, $s1, $t1, $t2
# Clobbers:	$t1, $t2

# Locals:
#	- `row' in $s0
#	- `col' in $s1
#	- `&grid[row][col]' in $t1
#	- '.' in $t2

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	sw	$s0, -12($sp)
	sw	$s1, -16($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -16
# actual code:
	li	$t2,'.'			# $t2 = '.'
	la	$t1,grid		# point to the address of grid
	li	$s0,0			# $s0 = row
	li	$s1,0			# $s1 = col

clear_rloop:
	beq	$s0,20,clear_end
	li	$s1,0

clear_cloop:
	beq	$s1,40,clear_next_row	# clear next row
	mul	$t3,$s0,40		# NCLOS * row
	add	$t3,$t3,$s1		# NCOLS * row + col
	add	$t3,$t3,$t1
	sb	$t2,0($t3)		# store the element in the array
	addi	$s1,$s1,1
	j	clear_cloop
clear_next_row:
	addi	$s0,$s0,1
	j	clear_rloop
clear_end:	
	# tear down stack frame
	lw	$s1, -12($fp)
	lw	$s0, -8($fp)
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra


####################################
# drawGrid() ... display current grid[][] matrix
# .TEXT <drawGrid>
	.text
drawGrid:

# Frame:	$fp, $ra, $s0, $s1, $t1
# Uses: 	$s0, $s1
# Clobbers:	$t1

# Locals:
#	- `row' in $s0
#	- `col' in $s1
#	- `&grid[row][col]' in $t1

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	sw	$s0, -12($sp)
	sw	$s1, -16($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -16

	li	$s0,0			# $s0 = row
	li	$s1,0			# $s1 = col
	la	$t1,grid

draw_rloop:
	beq	$s0,20,draw_end		# end of drawGrid
	li	$s1,0			# colIndex
draw_cloop:
	beq	$s1,40,draw_next_row	# next row
	mul	$t2,$s0,40		# NCOLS * row
	add	$t2,$t2,$s1		# NCOLS * row + col
	add	$t2,$t2,$t1		# the address we want to read
	lb	$a0,($t2)
	li	$v0,11
	syscall				# print out the char
	addi	$s1,$s1,1
	j	draw_cloop
draw_next_row:
	la	$a0,eol
	li	$v0,4
	syscall				# print \n
	addi	$s0,$s0,1
	j	draw_rloop
draw_end:	
	# tear down stack frame
	lw	$s1, -12($fp)
	lw	$s0, -8($fp)
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra


####################################
# initWorm(col,row,len) ... set the wormCol[] and wormRow[]
#    arrays for a worm with head at (row,col) and body segements
#    on the same row and heading to the right (higher col values)
# .TEXT <initWorm>
	.text
initWorm:

# Frame:	$fp, $ra
# Uses: 	$a0, $a1, $a2, $t0, $t1, $t2
# Clobbers:	$t0, $t1, $t2

# Locals:
#	- `col' in $a0
#	- `row' in $a1
#	- `len' in $a2
#	- `newCol' in $t0
#	- `nsegs' in $t1
#	- temporary in $t2

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -8


	li     $t1, 1        	 # nseg = 1
	addi   $t2,$a0,1     	 # col + 1 = temp
	move   $t0,$t2        	 # newCol = col + 1

	la     $t8, wormCol      # address of wormCol = s1
	la     $t9, wormRow      # address of wormRow = s2
	sw     $a0, ($t8)     	 # wormCol[0] = col
	sw     $a1, ($t9)     	 # wormRow[0] = row

for_intWorm:
	beq    $t1,$a2,end_intWorm # nseg = len, end
	beq    $t0,40,end_intWorm # newCol = 40, end
	mul    $t4,$t1,4     	 # nseg * sizeof(int)
	add    $t2,$t4,$t8     	 # t2 is now the address of wormCol[nseg]
#	addi   $t0,$t0,1     	 # newCol++
	sw     $t0,($t2)     	 # wormCol[nsegs] = newCol
	move	$a0,$t0
	li	$v0,1
	syscall
	addi   $t0,$t0,1         # newCol++
	
	add    $t2,$t4,$t9	 # t2 is now the address of wormRow[nsegs]
	sw     $a1,($t2)	 # wormRow[nsegs] = row
	move   $a0,$a1

	add    $t1,$t1,1	 # nseg++
	j      for_intWorm

end_intWorm:
	
	# tear down stack frame
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra


####################################
# ongrid(col,row) ... checks whether (row,col)
#    is a valid coordinate for the grid[][] matrix
# .TEXT <onGrid>
	.text
onGrid:

# Frame:	$fp, $ra
# Uses: 	$a0, $a1, $v0
# Clobbers:	$v0

# Locals:
#	- `col' in $a0
#	- `row' in $a1

# Code:

	# set up stack frame
	sw      $fp, -4($sp)
	sw      $ra, -8($sp)
	la      $fp, -4($sp)
	addiu   $sp, $sp, -8
    # code for function
	# set up the function arguments:
	move	$s0, $a0	# col = $s0
	move	$s1, $a1	# row = $s1
	li	$t1, 40		# NCOLS = $t1
	li	$t2, 20		# NROWS = $t2

if_col:
	bge	$s0,0,if_NCOLS
	j	return_ZERO
if_NCOLS:
	bgt	$t1,$s0,if_row
	j	return_ZERO
if_row:
	bge	$s1,0,if_NROWS
	j	return_ZERO
if_NROWS:
	bgt	$t2,$s1,return_ONE
	j	return_ZERO
return_ONE:
	li	$v0,1
	# tear down stack frame
	lw      $ra, -4($fp)
	la      $sp, 4($fp)
	lw      $fp, ($fp)
	jr      $ra
return_ZERO:
	li	$v0,0
	# tear down stack frame
	lw      $ra, -4($fp)
	la      $sp, 4($fp)
	lw      $fp, ($fp)
	jr      $ra

####################################
# overlaps(r,c,len) ... checks whether (r,c) holds a body segment
# .TEXT <overlaps>
	.text
overlaps:

# Frame:	$fp, $ra
# Uses: 	$a0, $a1, $a2
# Clobbers:	$t6, $t7

# Locals:
#	- `col' in $a0
#	- `row' in $a1
#	- `len' in $a2
#	- `i' in $t6

# Code:

	# set up stack frame
	sw      $fp, -4($sp)
	sw      $ra, -8($sp)
	la      $fp, -4($sp)
	addiu   $sp, $sp, -8
    # code for function
	li	$t6,0		# int i = 0
overlap_for:
	beq	$t6,$a2,overlap_return_ZERO
	mul	$t1,$t6,4
	la	$t3,wormCol
	la	$t4,wormRow
	add	$t3,$t3,$t1	# $t3 now points to wormCol[i]
	add	$t4,$t4,$t1	# $t4 now points to wormRow[i]
	lw	$t5,($t3)	# the value of wormCol[i]
	lw	$t7,($t4)	# the value of wormRow[i]
	beq	$t5,$a0,overlap_if_1
	j	overlap_for_continue
overlap_if_1:
	beq	$t7,$a1,overlap_return_ONE
	j	overlap_for_continue
overlap_for_continue:
	add    $t6,$t6,1
	j       overlap_for
overlap_return_ZERO:

	li      $v0,0
	# tear down stack frame
	lw      $ra, -4($fp)
	la      $sp, 4($fp)
	lw      $fp, ($fp)
	jr      $ra
overlap_return_ONE:
	li	$v0,1
	# tear down stack frame
	lw      $ra, -4($fp)
	la      $sp, 4($fp)
	lw      $fp, ($fp)
	jr      $ra

####################################
# moveWorm() ... work out new location for head
#         and then move body segments to follow
# updates wormRow[] and wormCol[] arrays

# (col,row) coords of possible places for segments
# done as global data; putting on stack is too messy
	.data
	.align 4
possibleCol: .space 8 * 4	# sizeof(word)
possibleRow: .space 8 * 4	# sizeof(word)

# .TEXT <moveWorm>
	.text
moveWorm:

# Frame:	$fp, $ra, $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7
# Uses: 	$s0, $s1, $s2, $s3, $s4, $s5, $s6, $s7, $t0, $t1, $t2, $t3
# Clobbers:	$t0, $t1, $t2, $t3

# Locals:
#	- `col' in $s0
#	- `row' in $s1
#	- `len' in $s2
#	- `dx' in $s3
#	- `dy' in $s4
#	- `n' in $s7
#	- `i' in $t0
#	- tmp in $t1
#	- tmp in $t2
#	- tmp in $t3
# 	- `&possibleCol[0]' in $s5
#	- `&possibleRow[0]' in $s6

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	sw	$s0, -12($sp)
	sw	$s1, -16($sp)
	sw	$s2, -20($sp)
	sw	$s3, -24($sp)
	sw	$s4, -28($sp)
	sw	$s5, -32($sp)
	sw	$s6, -36($sp)
	sw	$s7, -40($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -40


	move	$s2,$a0			# $s2 = len
	li	$s7,0			# n = 0
	la	$s5,wormCol		# wormCol address
	la	$s6,wormRow		# wormRow address
	li	$s3,-1			# dx = -1 ($s3)
	li	$s4,-1			# dy = -1 ($s4)
	
moveWorm_for1:
	beq	$s3,2,end_of_nested	# if dx > 1, branch to end
	li	$s4,-1			# reinitialize dy = -1
moveWorm_for2:
	beq	$s4,2,next_dx		# branch to next dx
	la	$s5,wormCol
	lw	$t2,($s5)		# value of wormCol[0]
	add	$t8,$t2,$s3		# wormCol[0] + dx
	move	$s0,$t8			# col = wormCol[0] + dx

	la	$s6,wormRow
	lw	$t3,($s6)		# value of wormRow[0]
	add	$t3,$t3,$s4		# wormRow[0] + dy
	move	$s1,$t3			# row = wormRow[0] + dy
	# if statement within the nested loop
	move	$a0,$s0			# col is the first argument
	move	$a1,$s1			# row is the second argument
	jal	onGrid	
	beq	$v0,1,keep_going_if	# if it is onGrid, keep going if
	j	keep_going_for2
keep_going_if:
	# calling overlaps
	move	$a0,$s0
	move	$a1,$s1
	move	$a2,$s2
	jal	overlaps
	beq	$v0,1,keep_going_for2
	la	$t9,possibleCol
	mul	$t3,$s7,4		# n * sizeof(int)
	add	$t2,$t3,$t9		# address of possibleCol[n]
	sw	$s0,($t2)		# possibleCol[n] = col
	la	$t8,possibleRow
	add	$t2,$t3,$t8		# address of possibleRow[n]
	sw	$s1,($t2)		# possibleRow[n] = row
	addi	$s7,$s7,1		# n++
	j	keep_going_for2

keep_going_for2:	
	addi	$s4,$s4,1		# dy++
	j	moveWorm_for2		# continue the for loop

next_dx:
	addi	$s3,$s3,1		# dx++
	j	moveWorm_for1		# and here continues the for loop
end_of_nested:
	beq	$s7,0,early_return	# if (n == 0) return 0 ;

	sub	$t3,$s2,1		# $t3 = len - 1
	move	$t0,$t3			# i = len - 1

moveWorm_sec_for:
	beq	$t0,0,end_sec_for	# i == 0, end of for loop

	la	$t4,wormRow		# base address of wormRow
	la	$t5,wormCol		# base address of wormCol
	
	mul	$t2,$t0,4		# i * sizeof(int)
	sub	$t3,$t0,1		# i - 1
	mul	$t3,$t3,4		# (i - 1)* sizeof(int)
	add	$t2,$t2,$t4		# address of wormRow[i]
	add	$t3,$t3,$t4		# address of wormRow[i-1]
	lw	$t8,($t3)		# value of wormRow[n-1]
	sw	$t8,($t2)		# wormRow[i] = wormRow[i - 1]
	
	mul	$t2,$t0,4		# i * sizeof(int)
	sub	$t3,$t0,1		# i - 1
	mul	$t3,$t3,4		# (i - 1)* sizeof(int)
	add	$t2,$t2,$t5		# address of wormCol[n]
	add	$t3,$t3,$t5		# address of wormColw[n-1]
	lw	$t8,($t3)		# value	of wormCol[n-1]
	sw	$t8,($t2)		# wormCol[i] = wormCol[i - 1]
	sub	$t0,$t0,1		# i--
	j	moveWorm_sec_for

end_sec_for:
	move	$a0,$s7			# calling function randValue
	jal	randValue
	move	$t0,$v0			# i = randValue(n)
	mul	$t2,$t0,4		# i * sizeof(int)
	la	$t8,possibleRow
	add	$t3,$t2,$t8		# $t3 points to the address of possibleRow[i]
	la	$t4,wormRow
	lw	$t7,($t3)		# the value of possibleRow[i]
	sw	$t7,($t4)		# wormRow[0] = possibleRow[i]
	la	$t9,possibleCol
	la	$t5,wormCol
	add	$t3,$t2,$t9		# address of possibleCol[i]
	lw	$t7,($t3)		# the value of possibleRow[i]
	sw	$t7,($t5)		# wormCol = possibleCol[i]
	li	$v0,1
	# tear down stack frame
	lw      $s7, -36($fp)
	lw      $s6, -32($fp)
	lw      $s5, -28($fp)
	lw      $s4, -24($fp)
	lw      $s3, -20($fp)
	lw      $s2, -16($fp)
	lw      $s1, -12($fp)
	lw      $s0, -8($fp)
	lw      $ra, -4($fp)
	la      $sp, 4($fp)
	lw      $fp, ($fp)

	jr      $ra
early_return:
	li	$v0,0			# return 0
	# tear down stack frame
	lw	$s7, -36($fp)
	lw	$s6, -32($fp)
	lw	$s5, -28($fp)
	lw	$s4, -24($fp)
	lw	$s3, -20($fp)
	lw	$s2, -16($fp)
	lw	$s1, -12($fp)
	lw	$s0, -8($fp)
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)

	jr	$ra

####################################
# addWormTogrid(N) ... add N worm segments to grid[][] matrix
#    0'th segment is head, located at (wormRow[0],wormCol[0])
#    i'th segment located at (wormRow[i],wormCol[i]), for i > 0
# .TEXT <addWormToGrid>
	.text
addWormToGrid:

# Frame:	$fp, $ra, $s0, $s1, $s2, $s3
# Uses: 	$a0, $s0, $s1, $s2, $s3, $t1
# Clobbers:	$t1

# Locals:
#	- `len' in $a0
#	- `&wormCol[i]' in $s0
#	- `&wormRow[i]' in $s1
#	- `grid[row][col]'
#	- `i' in $t0

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	sw	$s0, -12($sp)
	sw	$s1, -16($sp)
	sw	$s2, -20($sp)
	sw	$s3, -24($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -24

#	li	$s3,10		# function argument
	la	$t0,wormCol	# $t0 is a pointer to wormCol
	la	$t1,wormRow	# $t1 is a pointer to wormRow
	lw	$s0,($t0)	# wormCol[0]'s value = col
	lw	$s1,($t1)	# wormRow[0]'s value = row
	mul	$t2,$s1,40	# NCOLS * row
	add	$t2,$t2,$s0	# NCOLS * row + col
	la	$t3,grid	# address of grid
	add	$t2,$t2,$t3	# address of grid[row][col]
	li	$t4,'@'		# store '@' in $t4
	sb	$t4,($t2)	# store $t4 at the grid array
	li	$t0,1
for_addWorm:
	beq	$t0,$a0,addWorm_end
	la	$t5,wormRow	# $t5 base address of wormRow
	la	$t6,wormCol	# $t6 base address of wormCol
	mul	$t9,$t0,4	# i * sizeof(int)
	add	$t5,$t5,$t9	# address of wormRow[i]
	add	$t6,$t6,$t9	# address of wormCol[i]
	lw	$s1,($t5)	# value of wormRow[i]
	lw	$s0,($t6)	# value of wormCol[i]
	mul	$t1,$s1,40	# NCOLS * row
	add	$t1,$t1,$s0	# offset of NCOLS * row + col
	la	$t3,grid
	li	$t4,'o'
	add	$t3,$t1,$t3	# address of grid[row][col]
	sb	$t4,($t3)	# store 'o' into the array
	add	$t0,$t0,1
	
	j	for_addWorm
addWorm_end:	
	# tear down stack frame
	lw	$s3, -20($fp)
	lw	$s2, -16($fp)
	lw	$s1, -12($fp)
	lw	$s0, -8($fp)
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra

####################################
# giveUp(msg) ... print error message and exit
# .TEXT <giveUp>
	.text
giveUp:

# Frame:	frameless; divergent
# Uses: 	$a0, $a1
# Clobbers:	$s0, $s1

# Locals:
#	- `progName' in $a0/$s0
#	- `errmsg' in $a1/$s1

# Code:
	add	$s0, $0, $a0
	add	$s1, $0, $a1

	# if (errmsg != NULL) printf("%s\n",errmsg);
	beq	$s1, $0, giveUp_usage

	# puts $a0
	add	$a0, $0, $s1
	addiu	$v0, $0, 4	# print_string
	syscall

	# putchar '\n'
	add	$a0, $0, 0x0a
	addiu	$v0, $0, 11	# print_char
	syscall

giveUp_usage:
	# printf("Usage: %s #Segments #Moves Seed\n", progName);
	la	$a0, giveUp__0
	addiu	$v0, $0, 4	# print_string
	syscall

	add	$a0, $0, $s0
	addiu	$v0, $0, 4	# print_string
	syscall

	la	$a0, giveUp__1
	addiu	$v0, $0, 4	# print_string
	syscall

	# exit(EXIT_FAILURE);
	addi	$a0, $0, 1 # EXIT_FAILURE
	addiu	$v0, $0, 17	# exit2
	syscall
	# doesn't return

####################################
# intValue(str) ... convert string of digits to int value
# .TEXT <intValue>
	.text
intValue:

# Frame:	$fp, $ra
# Uses: 	$t0, $t1, $t2, $t3, $t4, $t5
# Clobbers:	$t0, $t1, $t2, $t3, $t4, $t5

# Locals:
#	- `s' in $t0
#	- `*s' in $t1
#	- `val' in $v0
#	- various temporaries in $t2

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -8

	# int val = 0;
	add	$v0, $0, $0

	# register various useful values
	addi	$t2, $0, 0x20 # ' '
	addi	$t3, $0, 0x30 # '0'
	addi	$t4, $0, 0x39 # '9'
	addi	$t5, $0, 10

	# for (char *s = str; *s != '\0'; s++) {
intValue_s_init:
	# char *s = str;
	add	$t0, $0, $a0
intValue_s_cond:
	# *s != '\0'
	lb	$t1, ($t0)
	beq	$t1, $0, intValue_s_end

	# if (*s == ' ') continue; # ignore spaces
	beq	$t1, $t2, intValue_s_step

	# if (*s < '0' || *s > '9') return -1;
	blt	$t1, $t3, intValue_isndigit
	bgt	$t1, $t4, intValue_isndigit

	# val = val * 10
	mult	$v0, $t5
	mflo	$v0

	# val = val + (*s - '0');
	sub	$t1, $t1, $t3
	add	$v0, $v0, $t1

intValue_s_step:
	# s = s + 1
	addi	$t0, $t0, 1	# sizeof(byte)
	j	intValue_s_cond
intValue_s_end:

intValue__post:
	# tear down stack frame
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra

intValue_isndigit:
	# return -1
	addi	$v0, $0, -1
	j	intValue__post

####################################
# delay(N) ... waste some time; larger N wastes more time
#                            makes the animation believable
# .TEXT <delay>
	.text
delay:

# Frame:	$fp, $ra
# Uses: 	$a0
# Clobbers:	$t0, $t1, $t2

# Locals:
#	- `n' in $a0
#	- `x' in $f6
#	- `i' in $t0
#	- `j' in $t1
#	- `k' in $t2

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -8

	li	$t0,0		# int i = 0
	li	$s0,3		# int x = 3
delay_for1:
	beq	$t0,$a0,delay_end
	li	$t1,0		# j = 0
delay_for2:
	beq	$t1,40000,delay_One
	li	$t2,0
delay_for3:
	beq	$t2,1000,delay_Two

	mul	$s0,$s0,3
	addi	$t2,$t2,1
	j	delay_for3
delay_One:
	addi	$t0,$t0,1
	j	delay_for1
delay_Two:
	addi	$t1,$t1,1
	j	delay_for2
delay_end:	
	# tear down stack frame
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra


####################################
# seedRand(Seed) ... seed the random number generator
# .TEXT <seedRand>
	.text
seedRand:

# Frame:	$fp, $ra
# Uses: 	$a0
# Clobbers:	[none]

# Locals:
#	- `seed' in $a0

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -8

	# randSeed <- $a0
	sw	$a0, randSeed

seedRand__post:
	# tear down stack frame
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra

####################################
# randValue(n) ... generate random value in range 0..n-1
# .TEXT <randValue>
	.text
randValue:

# Frame:	$fp, $ra
# Uses: 	$a0
# Clobbers:	$t0, $t1

# Locals:	[none]
#	- `n' in $a0

# Structure:
#	rand
#	-> [prologue]
#       no intermediate control structures
#	-> [epilogue]

# Code:
	# set up stack frame
	sw	$fp, -4($sp)
	sw	$ra, -8($sp)
	la	$fp, -4($sp)
	addiu	$sp, $sp, -8

	# $t0 <- randSeed
	lw	$t0, randSeed
	# $t1 <- 1103515245 (magic)
	li	$t1, 0x41c64e6d

	# $t0 <- randSeed * 1103515245
	mult	$t0, $t1
	mflo	$t0

	# $t0 <- $t0 + 12345 (more magic)
	addi	$t0, $t0, 0x3039

	# $t0 <- $t0 & RAND_MAX
	and	$t0, $t0, 0x7fffffff

	# randSeed <- $t0
	sw	$t0, randSeed

	# return (randSeed % n)
	div	$t0,$a0
	mfhi	$v0

rand__post:
	# tear down stack frame
	lw	$ra, -4($fp)
	la	$sp, 4($fp)
	lw	$fp, ($fp)
	jr	$ra

